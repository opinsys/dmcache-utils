#!/bin/bash
#
# Copyright (C) 2013 Opinsys Oy
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

while read name metadata_dev cache_dev origin_dev block_size _; do

    if [ -n "$1" ]; then
        if [ "${name}" != "$1" ]; then
            continue
        fi
    fi

    dmsetup ls --target cache | egrep -q "^${name}\s+" || {
        echo "W: dmcache '${name}' does not exist" >&2
        continue
    }

    read -a table < <(dmsetup table "${name}")

    # Sanity check: only for cache targets. Admin has done something
    # really wrong if this test triggers an error. In that case, admin
    # knows better.
    if [ "${table[2]}" != "cache" ]; then
        echo "E: unexpected device mapper target '${table[2]}', expected 'cache'" >&2
        continue
    fi

    # Sanity check: cleanup only if the device is in an expected state
    # executing an expected policy. It should be either 'default' or
    # 'cleaner', but might differ if admin has done something. In that
    # case, admin knows better and should be able to unload the cache
    # manually.
    case "${table[8]}" in
        default|cleaner)
            ;;
        *)
            echo "E: unexpected cache policy '${table[8]}', expected 'default' or 'cleaner'" >&2
            continue
            ;;
    esac

    dmsetup suspend "${name}" || {
        echo "E: failed to suspend dmdcache '${name}', perhaps umount it first?" >&2
        continue
    }

    # Setup cleaner policy by reloading the device with a modified
    # table.
    table[8]="cleaner" # Set new policy ...
    table[9]=0         # ... without any args.
    dmsetup reload "${name}" --table "${table[*]}" || {
        echo "E: failed to reload dmcache '${name}' with cleanup policy" >&2
        continue
    }

    dmsetup resume "${name}" || {
        echo "E: failed to resume dmdcache '${name}' with cleanup policy" >&2
        continue
    }

    dmsetup remove "${name}" || {
        echo "E: failed to remove dmcache '${name}'" >&2
        continue
    }

done < <(egrep -vr '^\s*#' /etc/dmctab)
